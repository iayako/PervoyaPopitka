"""
–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ –∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏
"""

import random
import asyncio
from typing import Dict, List, Tuple, Optional
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from tarot_cards_updated import tarot_loader


class AnimatedTarotReading:
    def __init__(self):
        self.card_loader = tarot_loader
        self.all_cards = self.card_loader.get_all_cards()
        
    def draw_cards(self, count: int) -> List[Tuple[Dict, bool]]:
        """
        –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∫–∞—Ä—Ç–∞_–¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞_–ª–∏)
        """
        if count > len(self.all_cards):
            msg = f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å {count} –∫–∞—Ä—Ç –∏–∑ "
            msg += f"{len(self.all_cards)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
            raise ValueError(msg)
        
        selected_cards = random.sample(self.all_cards, count)
        
        # –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–∞ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        cards_with_orientation = []
        for card in selected_cards:
            is_reversed = random.random() < 0.3
            cards_with_orientation.append((card, is_reversed))
        
        return cards_with_orientation
    
    def create_spread(self, spread_type: str) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        """
        if spread_type not in SPREAD_TYPES:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞: {spread_type}")
        
        spread_info = SPREAD_TYPES[spread_type]
        positions = spread_info["positions"]
        cards = self.draw_cards(len(positions))
        
        spread_result = {
            "name": spread_info["name"],
            "description": spread_info["description"],
            "emoji": spread_info["emoji"],
            "cards": []
        }
        
        for i, (card, is_reversed) in enumerate(cards):
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞—Ä—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
            card_index = self.all_cards.index(card)
            
            card_info = {
                "position": positions[i],
                "card_data": card,
                "is_reversed": is_reversed,
                "interpretation": self.card_loader.format_card_description(
                    card, is_reversed),
                "image_path": self.card_loader.get_card_image_path(card_index)
            }
            spread_result["cards"].append(card_info)
        
        return spread_result
    
    async def send_animated_spread(self, update: Update,
                                   context: ContextTypes.DEFAULT_TYPE,
                                   spread: Dict) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
        """
        query = update.callback_query
        chat_id = query.message.chat_id
        
        # –≠—Ç–∞–ø 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "—Ç–∞—Å–æ–≤–∞–Ω–∏—è"
        await self._show_shuffling_animation(query, spread)
        
        # –≠—Ç–∞–ø 2: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        for i, card_info in enumerate(spread["cards"]):
            await self._reveal_card_with_animation(
                context, chat_id, card_info, i + 1)
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
        
        # –≠—Ç–∞–ø 3: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self._send_final_summary(context, chat_id, spread)
    
    async def _show_shuffling_animation(self, query, spread: Dict) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Ç–∞—Å–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
        """
        messages = [
            f"üîÆ {spread['emoji']} –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–∫–ª–∞–¥ *{spread['name']}*...",
            "üÉè –¢–∞—Å—É—é –∫–∞—Ä—Ç—ã...",
            "‚ú® –ö–∞—Ä—Ç—ã –≥–æ—Ç–æ–≤—ã —Ä–∞—Å–∫—Ä—ã—Ç—å —Å–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã...",
            f"üéØ –î–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ {len(spread['cards'])} –∫–∞—Ä—Ç(—ã)..."
        ]
        
        for i, message in enumerate(messages):
            await query.edit_message_text(
                message, parse_mode=ParseMode.MARKDOWN)
            await asyncio.sleep(1.5)
    
    async def _reveal_card_with_animation(self,
                                          context: ContextTypes.DEFAULT_TYPE,
                                          chat_id: int, card_info: Dict,
                                          card_number: int) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        position_message = (f"üé¥ **{card_number}. "
                            f"{card_info['position']}**")
        await context.bot.send_message(
            chat_id, position_message, parse_mode=ParseMode.MARKDOWN)
        
        # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        image_path = card_info.get('image_path')
        if image_path:
            try:
                with open(image_path, 'rb') as photo:
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo,
                        caption=card_info['interpretation'],
                        parse_mode=ParseMode.MARKDOWN
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è "
                      f"{image_path}: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await context.bot.send_message(
                    chat_id=chat_id,
                    text=card_info['interpretation'],
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(
                chat_id=chat_id,
                text=card_info['interpretation'],
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def _send_final_summary(self, context: ContextTypes.DEFAULT_TYPE,
                                  chat_id: int, spread: Dict) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        """
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        summary_message = f"""
‚ú® **–†–∞—Å–∫–ª–∞–¥ "{spread['name']}" –∑–∞–≤–µ—Ä—à–µ–Ω!**

_{spread['description']}_

üîÆ –í—Å–µ –∫–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–∞—Ç—å –≤–∞–º –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã.

_–ü–æ–º–Ω–∏—Ç–µ: –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –º—É–¥—Ä–æ!_
"""
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥",
                                  callback_data="new_spread")],
            [InlineKeyboardButton("ü§ñ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è",
                                  callback_data="ai_interpret")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=summary_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    def get_card_by_name(self, name: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ –∏–º–µ–Ω–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        """
        return self.card_loader.get_card_by_name(name)
    
    def format_simple_spread_message(self, spread: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–∫–ª–∞–¥ –≤ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        """
        message = f"‚ú® *{spread['name']}*\n\n"
        message += f"_{spread['description']}_\n\n"
        
        for i, card in enumerate(spread['cards'], 1):
            message += f"**{i}. {card['position']}**\n"
            message += f"{card['interpretation']}\n\n"
        
        return message
    
    def get_spread_statistics(self) -> Dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç
        """
        stats = self.card_loader.get_statistics()
        
        return {
            "total_cards": stats["total_cards"],
            "major_arcana": stats["major_arcana"],
            "minor_arcana": stats["minor_arcana"],
            "spread_types": len(SPREAD_TYPES)
        }


# –¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤ —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
SPREAD_TYPES = {
    "one_card": {
        "name": "–ö–∞—Ä—Ç–∞ –¥–Ω—è",
        "description": ("–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–∞—Å—Ç –æ–±—â–∏–π —Å–æ–≤–µ—Ç –∏–ª–∏ "
                        "–ø–æ–∫–∞–∂–µ—Ç —ç–Ω–µ—Ä–≥–∏—é –¥–Ω—è"),
        "positions": ["–û–±—â–∏–π —Å–æ–≤–µ—Ç"],
        "emoji": "üÉè"
    },
    "three_cards": {
        "name": "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ",
        "description": ("–¢—Ä–∏ –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–µ –≤–ª–∏—è–Ω–∏–µ –ø—Ä–æ—à–ª–æ–≥–æ, "
                        "–Ω–∞—Å—Ç–æ—è—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –±—É–¥—É—â–µ–µ"),
        "positions": ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"],
        "emoji": "üîÆ"
    },
    "celtic_cross": {
        "name": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
        "description": ("–ü–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ 10 –∫–∞—Ä—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ "
                        "–∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Ç—É–∞—Ü–∏–∏"),
        "positions": [
            "–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
            "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ/–≤—ã–∑–æ–≤",
            "–î–∞–ª–µ–∫–æ–µ –ø—Ä–æ—à–ª–æ–µ",
            "–ù–µ–¥–∞–≤–Ω–µ–µ –ø—Ä–æ—à–ª–æ–µ",
            "–í–æ–∑–º–æ–∂–Ω–æ–µ –±—É–¥—É—â–µ–µ",
            "–ë–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ",
            "–í–∞—à –ø–æ–¥—Ö–æ–¥",
            "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è",
            "–ù–∞–¥–µ–∂–¥—ã –∏ —Å—Ç—Ä–∞—Ö–∏",
            "–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        ],
        "emoji": "‚ú®"
    }
} 
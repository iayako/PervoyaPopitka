"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (Application, CommandHandler, CallbackQueryHandler, 
                          ContextTypes, MessageHandler, filters)
from telegram.constants import ParseMode

from config import BOT_TOKEN
from animated_tarot_logic import AnimatedTarotReading, SPREAD_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
tarot_reader = AnimatedTarotReading()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    stats = tarot_reader.get_spread_statistics()
    
    major_count = stats['major_arcana']
    minor_count = stats['minor_arcana']
    total_count = stats['total_cards']
    
    welcome_message = f"""
üîÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¢–∞—Ä–æ-–±–æ—Ç!* üîÆ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ —Å 
–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã.

üìä *–î–æ—Å—Ç—É–ø–Ω–æ:*
‚Ä¢ {total_count} –∫–∞—Ä—Ç –¢–∞—Ä–æ ({major_count} –°—Ç–∞—Ä—à–∏—Ö + {minor_count} –ú–ª–∞–¥—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤)
‚Ä¢ {stats['spread_types']} —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
‚Ä¢ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/spreads - –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
/help - –ü–æ–º–æ—â—å

–ù–∞–∂–º–∏—Ç–µ /spreads —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! ‚ú®
"""
    
    await update.message.reply_text(
        welcome_message,
        parse_mode=ParseMode.MARKDOWN
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = """
üîÆ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¢–∞—Ä–æ-–±–æ—Ç–∞*

*–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üé¨ **–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å–∫–ª–∞–¥—ã** - –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
‚Ä¢ üñºÔ∏è **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç** - –≤—ã —É–≤–∏–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ
‚Ä¢ üìö **–ü–æ–ª–Ω–∞—è –∫–æ–ª–æ–¥–∞** - –≤—Å–µ 78 –∫–∞—Ä—Ç (22 –°—Ç–∞—Ä—à–∏—Ö + 56 –ú–ª–∞–¥—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤)
‚Ä¢ üé≠ **–£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è** - –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤:*
‚Ä¢ **üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è** - –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ–≤–µ—Ç–∞
‚Ä¢ **üîÆ –ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ** - –¢—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
‚Ä¢ **‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç** - –ü–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ 10 –∫–∞—Ä—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ /spreads
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
3. –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–∞—Å–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
4. –ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Å–∏–≤–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
5. –ò–∑—É—á–∏—Ç–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã

*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ö–∞—Ä—Ç—ã –º–æ–≥—É—Ç –≤—ã–ø–∞–¥–∞—Ç—å –≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
‚Ä¢ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–∞—Ä–æ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π

_–ü—É—Å—Ç—å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —É–∫–∞–∂—É—Ç –≤–∞–º –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å!_ üåü
"""
    
    await update.message.reply_text(
        help_message,
        parse_mode=ParseMode.MARKDOWN
    )


async def spreads_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞"""
    keyboard = [
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è (1 –∫–∞—Ä—Ç–∞)", 
                              callback_data="spread_one_card")],
        [InlineKeyboardButton("üîÆ –ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ (3 –∫–∞—Ä—Ç—ã)", 
                              callback_data="spread_three_cards")],
        [InlineKeyboardButton("‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç (10 –∫–∞—Ä—Ç)", 
                              callback_data="spread_celtic_cross")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç", 
                              callback_data="show_stats")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = """
üîÆ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞:*

üÉè **–ö–∞—Ä—Ç–∞ –¥–Ω—è** - –ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç —Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ–π
üîÆ **–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ** - –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Ç—É–∞—Ü–∏–∏  
‚ú® **–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç** - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö

_–ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–∞—Ä—Ç!_
"""
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_spread_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –∏–∑ callback_data
    spread_type = query.data.replace("spread_", "")
    
    if spread_type not in SPREAD_TYPES:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥
        spread = tarot_reader.create_spread(spread_type)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥
        await tarot_reader.send_animated_spread(update, context, spread)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
                "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="new_spread")]])
        )


async def handle_show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç"""
    query = update.callback_query
    await query.answer()
    
    stats = tarot_reader.get_spread_statistics()
    
    stats_message = f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç –¢–∞—Ä–æ*

üé¥ **–í—Å–µ–≥–æ –∫–∞—Ä—Ç:** {stats['total_cards']}
üîÆ **–°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã:** {stats['major_arcana']} –∫–∞—Ä—Ç
üÉè **–ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã:** {stats['minor_arcana']} –∫–∞—Ä—Ç
‚ú® **–¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤:** {stats['spread_types']}

üí´ **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í—Å–µ –∫–∞—Ä—Ç—ã –∏–º–µ—é—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç
‚Ä¢ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

_–ì–æ—Ç–æ–≤—ã –∫ –º–∞–≥–∏—á–µ—Å–∫–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é?_
"""
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞—Å–∫–ª–∞–¥–∞–º", 
                              callback_data="back_to_spreads")],
        [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥", 
                              callback_data="random_spread")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        stats_message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_random_spread(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥"""
    query = update.callback_query
    await query.answer()
    
    import random
    spread_types = list(SPREAD_TYPES.keys())
    random_spread_type = random.choice(spread_types)
    
    try:
        spread = tarot_reader.create_spread(random_spread_type)
        await tarot_reader.send_animated_spread(update, context, spread)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
                "üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="random_spread")]])
        )


async def handle_back_to_spreads(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è (1 –∫–∞—Ä—Ç–∞)", 
                              callback_data="spread_one_card")],
        [InlineKeyboardButton("üîÆ –ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ (3 –∫–∞—Ä—Ç—ã)", 
                              callback_data="spread_three_cards")],
        [InlineKeyboardButton("‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç (10 –∫–∞—Ä—Ç)", 
                              callback_data="spread_celtic_cross")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç", 
                              callback_data="show_stats")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = """
üîÆ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞:*

üÉè **–ö–∞—Ä—Ç–∞ –¥–Ω—è** - –ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç —Å –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ–π
üîÆ **–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ** - –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Ç—É–∞—Ü–∏–∏  
‚ú® **–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç** - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç** - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö

_–ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–∞—Ä—Ç!_
"""
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_new_spread(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥"""
    await handle_back_to_spreads(update, context)


async def handle_ai_interpretation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é (–∑–∞–≥–ª—É—à–∫–∞)"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "ü§ñ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö!\n\n" +
        "–°–µ–π—á–∞—Å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. " +
        "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n\n" +
        "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
            "üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="new_spread")]])
    )


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower()
    
    keywords = ['—Ç–∞—Ä–æ', '–∫–∞—Ä—Ç', '—Ä–∞—Å–∫–ª–∞–¥', '–≥–∞–¥–∞–Ω–∏–µ', '–∞–Ω–∏–º–∞—Ü–∏—è']
    if any(word in text for word in keywords):
        await update.message.reply_text(
            "üîÆ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /spreads",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(
                "üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", callback_data="back_to_spreads")]])
        )
    else:
        msg = "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–∞—Ö –¢–∞—Ä–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–∞—Ä—Ç! üîÆ‚ú®\n\n"
        msg += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /spreads –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
        await update.message.reply_text(msg)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("spreads", spreads_menu))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_spread_selection, pattern="^spread_"))
    application.add_handler(CallbackQueryHandler(handle_show_stats, pattern="^show_stats$"))
    application.add_handler(CallbackQueryHandler(handle_random_spread, pattern="^random_spread$"))
    application.add_handler(CallbackQueryHandler(handle_back_to_spreads, pattern="^back_to_spreads$"))
    application.add_handler(CallbackQueryHandler(handle_new_spread, pattern="^new_spread$"))
    application.add_handler(CallbackQueryHandler(handle_ai_interpretation, pattern="^ai_interpret"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("üîÆ –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¢–∞—Ä–æ-–±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main() 
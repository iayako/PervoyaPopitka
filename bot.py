"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode

from config import BOT_TOKEN
from tarot_logic import TarotReading
from tarot_cards import SPREAD_TYPES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏
tarot_reader = TarotReading()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_message = """
üîÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞—Ä–æ-–±–æ—Ç!* üîÆ

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –∫–∞—Ä—Ç –¢–∞—Ä–æ –∏ –ø–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/spreads - –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
/help - –ü–æ–º–æ—â—å

–ù–∞–∂–º–∏—Ç–µ /spreads —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
"""
    
    await update.message.reply_text(
        welcome_message,
        parse_mode=ParseMode.MARKDOWN
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_message = """
üîÆ *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¢–∞—Ä–æ-–±–æ—Ç–∞*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤:*
‚Ä¢ **–ö–∞—Ä—Ç–∞ –¥–Ω—è** - –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ–≤–µ—Ç–∞
‚Ä¢ **–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ** - –¢—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
‚Ä¢ **–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç** - –ü–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ 10 –∫–∞—Ä—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ /spreads
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç

*–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:*
‚Ä¢ –ö–∞—Ä—Ç—ã –º–æ–≥—É—Ç –≤—ã–ø–∞–¥–∞—Ç—å –≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
‚Ä¢ –ö–∞–∂–¥—ã–π —Ä–∞—Å–∫–ª–∞–¥ —É–Ω–∏–∫–∞–ª–µ–Ω –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–∞—Ä–æ –∫–∞–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, –∞ –Ω–µ –∫–∞–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±—É–¥—É—â–µ–≥–æ

_–ü—É—Å—Ç—å –∫–∞—Ä—Ç—ã —É–∫–∞–∂—É—Ç –≤–∞–º –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å!_ ‚ú®
"""
    
    await update.message.reply_text(
        help_message,
        parse_mode=ParseMode.MARKDOWN
    )


async def spreads_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞"""
    keyboard = [
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è (1 –∫–∞—Ä—Ç–∞)", callback_data="spread_one_card")],
        [InlineKeyboardButton("üîÆ –ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ (3 –∫–∞—Ä—Ç—ã)", callback_data="spread_three_cards")],
        [InlineKeyboardButton("‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç (10 –∫–∞—Ä—Ç)", callback_data="spread_celtic_cross")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = """
üîÆ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:*

üÉè **–ö–∞—Ä—Ç–∞ –¥–Ω—è** - –ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è
üîÆ **–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ** - –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Ç—É–∞—Ü–∏–∏  
‚ú® **–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç** - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏

_–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:_
"""
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_spread_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞ –∏–∑ callback_data
    spread_type = query.data.replace("spread_", "")
    
    if spread_type not in SPREAD_TYPES:
        await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
    await query.edit_message_text("üîÆ –°–æ–∑–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥... –ü–µ—Ä–µ–º–µ—à–∏–≤–∞—é –∫–∞—Ä—Ç—ã...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥
        spread = tarot_reader.create_spread(spread_type)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = tarot_reader.format_spread_message(spread)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="new_spread")],
            [InlineKeyboardButton("ü§ñ –ü–æ–ª—É—á–∏—Ç—å AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é", callback_data=f"ai_interpret_{spread_type}")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É —Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if len(message) > 4096:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            parts = []
            current_part = ""
            
            for card in spread['cards']:
                card_text = f"**{card['position']}**\n{card['interpretation']}\n\n"
                if len(current_part + card_text) > 4000:
                    parts.append(current_part)
                    current_part = card_text
                else:
                    current_part += card_text
            
            if current_part:
                parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            header = f"‚ú® *{spread['name']}*\n\n_{spread['description']}_\n\n"
            await query.edit_message_text(header, parse_mode=ParseMode.MARKDOWN)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Ä–∞—Å–∫–ª–∞–¥–∞
            for i, part in enumerate(parts):
                if i == len(parts) - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=part,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
                else:
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=part,
                        parse_mode=ParseMode.MARKDOWN
                    )
        else:
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="new_spread")]])
        )


async def handle_new_spread(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥"""
    query = update.callback_query
    await query.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
    keyboard = [
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è (1 –∫–∞—Ä—Ç–∞)", callback_data="spread_one_card")],
        [InlineKeyboardButton("üîÆ –ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ (3 –∫–∞—Ä—Ç—ã)", callback_data="spread_three_cards")],
        [InlineKeyboardButton("‚ú® –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç (10 –∫–∞—Ä—Ç)", callback_data="spread_celtic_cross")],
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = """
üîÆ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:*

üÉè **–ö–∞—Ä—Ç–∞ –¥–Ω—è** - –ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è
üîÆ **–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ** - –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Ç—É–∞—Ü–∏–∏  
‚ú® **–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç** - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏

_–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:_
"""
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )


async def handle_ai_interpretation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é (–∑–∞–≥–ª—É—à–∫–∞)"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "ü§ñ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö!\n\n" +
        "–°–µ–π—á–∞—Å —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. " +
        "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç.\n\n" +
        "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥?",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥", callback_data="new_spread")]])
    )


async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower()
    
    if any(word in text for word in ['—Ç–∞—Ä–æ', '–∫–∞—Ä—Ç', '—Ä–∞—Å–∫–ª–∞–¥', '–≥–∞–¥–∞–Ω–∏–µ']):
        await update.message.reply_text(
            "üîÆ –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /spreads",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÆ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", callback_data="new_spread")]])
        )
    else:
        await update.message.reply_text(
            "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ä–∞—Å–∫–ª–∞–¥–∞—Ö –¢–∞—Ä–æ! üîÆ\n\n" +
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /spreads –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞ –∏–ª–∏ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏."
        )


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("spreads", spreads_menu))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(handle_spread_selection, pattern="^spread_"))
    application.add_handler(CallbackQueryHandler(handle_new_spread, pattern="^new_spread$"))
    application.add_handler(CallbackQueryHandler(handle_ai_interpretation, pattern="^ai_interpret_"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main() 
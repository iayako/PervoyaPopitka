/**
 * Telegram –±–æ—Ç —Å AI –∏ –¢–∞—Ä–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */

const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

const OpenRouterClient = require('../lib/openrouter');
const { TarotSpreadSystem } = require('../lib/tarot/spreads');

class TelegramAIBot {
  constructor() {
    this.token = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!this.token) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    this.bot = new TelegramBot(this.token, { polling: true });
    this.aiClient = new OpenRouterClient();
    this.tarotSystem = new TarotSpreadSystem();
    
    this.userSessions = new Map(); // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    this.setupHandlers();
    console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  }

  setupHandlers() {
    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start/, (msg) => this.handleStart(msg));
    this.bot.onText(/\/help/, (msg) => this.handleHelp(msg));
    this.bot.onText(/\/tarot/, (msg) => this.handleTarotMenu(msg));
    this.bot.onText(/\/ai/, (msg) => this.handleAIMenu(msg));
    this.bot.onText(/\/models/, (msg) => this.handleModels(msg));
    
    // Callback queries (–∫–Ω–æ–ø–∫–∏)
    this.bot.on('callback_query', (query) => this.handleCallbackQuery(query));
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', (msg) => this.handleMessage(msg));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
    });
  }

  async handleStart(msg) {
    const chatId = msg.chat.id;
    const username = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    const welcomeMessage = `
üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${username}!** üåü

–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–±–æ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:

ü§ñ **AI –ß–∞—Ç** - –û–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ AI –º–æ–¥–µ–ª—è–º–∏
üîÆ **–¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥—ã** - –ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Å–æ–≤–µ—Ç—ã
‚ú® **–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** - AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/ai - –í—ã–±—Ä–∞—Ç—å AI –º–æ–¥–µ–ª—å –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
/tarot - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ
/models - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏
/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!
`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'ü§ñ AI –ß–∞—Ç', callback_data: 'ai_chat' },
          { text: 'üîÆ –¢–∞—Ä–æ', callback_data: 'tarot_menu' }
        ],
        [
          { text: 'üéØ –ú–æ–¥–µ–ª–∏ AI', callback_data: 'show_models' },
          { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'show_help' }
        ]
      ]
    };

    await this.bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  async handleHelp(msg) {
    const chatId = msg.chat.id;
    
    const helpMessage = `
üìñ **–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å**

**ü§ñ AI –§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ ${this.aiClient.freeModels.length} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Å–æ–≤–µ—Ç—ã
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤

**üîÆ –¢–∞—Ä–æ –§—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ ${this.tarotSystem.getStatistics().spread_types} —Ç–∏–ø–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
‚Ä¢ ${this.tarotSystem.getStatistics().total_cards} –∫–∞—Ä—Ç (${this.tarotSystem.getStatistics().major_arcana} –°—Ç–∞—Ä—à–∏—Ö + ${this.tarotSystem.getStatistics().minor_arcana} –ú–ª–∞–¥—à–∏—Ö –ê—Ä–∫–∞–Ω–æ–≤)
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É

**üé≠ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
‚Ä¢ –ì–ª—É–±–æ–∫–∏–µ –¥—É—Ö–æ–≤–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

**üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**
‚Ä¢ –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ –î–ª—è –¢–∞—Ä–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tarot
‚Ä¢ –î–ª—è —Å–º–µ–Ω—ã AI –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ai
‚Ä¢ –§–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ç–∫–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

_–ü—É—Å—Ç—å AI –∏ –¥—Ä–µ–≤–Ω—è—è –º—É–¥—Ä–æ—Å—Ç—å –¢–∞—Ä–æ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã!_ ‚ú®
`;

    await this.bot.sendMessage(chatId, helpMessage, {
      parse_mode: 'Markdown'
    });
  }

  async handleTarotMenu(msg) {
    const chatId = msg.chat.id;
    const spreads = this.tarotSystem.getAvailableSpreads();
    
    const keyboard = {
      inline_keyboard: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞—Å–∫–ª–∞–¥–∞
    spreads.forEach(spread => {
      keyboard.inline_keyboard.push([{
        text: `${spread.emoji} ${spread.name} (${spread.card_count} –∫–∞—Ä—Ç)`,
        callback_data: `tarot_${spread.id}`
      }]);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    keyboard.inline_keyboard.push([
      { text: 'üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥', callback_data: 'tarot_random' },
      { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä—Ç', callback_data: 'tarot_stats' }
    ]);

    const message = `
üîÆ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¢–∞—Ä–æ —Ä–∞—Å–∫–ª–∞–¥–∞:**

–î–æ—Å—Ç—É–ø–Ω–æ ${spreads.length} —Ç–∏–ø–æ–≤ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π.

_–°–æ–≤–µ—Ç: –ü–æ—Å–ª–µ —Ä–∞—Å–∫–ª–∞–¥–∞ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é!_
`;

    await this.bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  async handleAIMenu(msg) {
    const chatId = msg.chat.id;
    const models = await this.aiClient.getModels();
    
    const keyboard = {
      inline_keyboard: []
    };

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
    for (let i = 0; i < models.length; i += 2) {
      const row = [];
      row.push({
        text: models[i].name,
        callback_data: `ai_model_${models[i].id}`
      });
      
      if (i + 1 < models.length) {
        row.push({
          text: models[i + 1].name,
          callback_data: `ai_model_${models[i + 1].id}`
        });
      }
      
      keyboard.inline_keyboard.push(row);
    }

    const message = `
ü§ñ **–í—ã–±–µ—Ä–∏—Ç–µ AI –º–æ–¥–µ–ª—å:**

–î–æ—Å—Ç—É–ø–Ω–æ ${models.length} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏:

‚Ä¢ **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ** - –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ **–ú–æ—â–Ω—ã–µ** - –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤  
‚Ä¢ **–ë—ã—Å—Ç—Ä—ã–µ** - –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
‚Ä¢ **–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ** - –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π

_–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!_
`;

    await this.bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  async handleModels(msg) {
    const chatId = msg.chat.id;
    const models = await this.aiClient.getModels();
    
    let message = 'üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏:**\n\n';
    
    models.forEach((model, index) => {
      message += `**${index + 1}. ${model.name}**\n`;
      message += `_${model.description}_\n`;
      message += `ID: \`${model.id}\`\n\n`;
    });

    message += '_–í—Å–µ –º–æ–¥–µ–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ! –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á._';

    await this.bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown'
    });
  }

  async handleCallbackQuery(query) {
    const chatId = query.message.chat.id;
    const data = query.data;
    const userId = query.from.id;

    try {
      await this.bot.answerCallbackQuery(query.id);

      if (data.startsWith('tarot_')) {
        await this.handleTarotCallback(chatId, userId, data, query);
      } else if (data.startsWith('ai_model_')) {
        await this.handleAIModelCallback(chatId, userId, data, query);
      } else if (data.startsWith('ai_interpret_')) {
        await this.handleAIInterpretation(chatId, userId, data.replace('ai_interpret_', ''));
      } else if (data === 'ai_chat') {
        await this.handleAIMenu({ chat: { id: chatId } });
      } else if (data === 'tarot_menu') {
        await this.handleTarotMenu({ chat: { id: chatId } });
      } else if (data === 'show_models') {
        await this.handleModels({ chat: { id: chatId } });
      } else if (data === 'show_help') {
        await this.handleHelp({ chat: { id: chatId } });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleCallbackQuery:', error);
      await this.bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
  }

  async handleTarotCallback(chatId, userId, data, query) {
    const spreadType = data.replace('tarot_', '');
    
    if (spreadType === 'random') {
      // –°–ª—É—á–∞–π–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥
      const spread = this.tarotSystem.createRandomSpread();
      await this.sendTarotSpread(chatId, spread, true);
    } else if (spreadType === 'stats') {
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      const stats = this.tarotSystem.getStatistics();
      const message = `
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¢–∞—Ä–æ —Å–∏—Å—Ç–µ–º—ã:**

üé¥ **–í—Å–µ–≥–æ –∫–∞—Ä—Ç:** ${stats.total_cards}
üîÆ **–°—Ç–∞—Ä—à–∏–µ –ê—Ä–∫–∞–Ω—ã:** ${stats.major_arcana}
üÉè **–ú–ª–∞–¥—à–∏–µ –ê—Ä–∫–∞–Ω—ã:** ${stats.minor_arcana}
‚ú® **–¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤:** ${stats.spread_types}
üé≠ **–ú–∞—Å—Ç–µ–π:** ${stats.suits}

_–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ª—é–±—ã—Ö –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!_
`;
      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: query.message.message_id,
        parse_mode: 'Markdown'
      });
    } else {
      // –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞
      try {
        const spread = this.tarotSystem.createSpread(spreadType);
        await this.sendTarotSpread(chatId, spread, true);
      } catch (error) {
        await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞: ${error.message}`);
      }
    }
  }

  async handleAIModelCallback(chatId, userId, data, query) {
    const modelId = data.replace('ai_model_', '');
    const modelInfo = this.aiClient.getModelInfo(modelId);
    
    if (!modelInfo) {
      await this.bot.sendMessage(chatId, '‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.userSessions.set(userId, {
      selectedModel: modelId,
      mode: 'ai_chat'
    });

    const message = `
‚úÖ **–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${modelInfo.name}**

_${modelInfo.description}_

–¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –∏—Å–ø–æ–ª—å–∑—É—è —ç—Ç—É –º–æ–¥–µ–ª—å!

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ –û–±—ä—è—Å–Ω–∏ –∫–≤–∞–Ω—Ç–æ–≤—É—é —Ñ–∏–∑–∏–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
‚Ä¢ –ü–æ–º–æ–≥–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∞ Python
‚Ä¢ –î–∞–π —Å–æ–≤–µ—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ
‚Ä¢ –°–æ—á–∏–Ω–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞—Å—Å–∫–∞–∑
`;

    await this.bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'Markdown'
    });
  }

  async sendTarotSpread(chatId, spread, withAIOption = false) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–∫–ª–∞–¥
    const message = this.tarotSystem.formatSpreadMessage(spread);
    
    const keyboard = withAIOption ? {
      inline_keyboard: [
        [
          { text: 'ü§ñ AI –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è', callback_data: `ai_interpret_${spread.type}` },
          { text: 'üîÑ –ù–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥', callback_data: 'tarot_menu' }
        ]
      ]
    } : undefined;

    await this.bot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    const userId = chatId; // –í –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö chatId = userId
    const session = this.userSessions.get(userId) || {};
    session.lastSpread = spread;
    this.userSessions.set(userId, session);
  }

  async handleMessage(msg) {
    if (msg.text && msg.text.startsWith('/')) {
      return; // –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    }

    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    if (!text) return;

    try {
      const session = this.userSessions.get(userId) || {};
      const selectedModel = session.selectedModel || this.aiClient.defaultModel;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
      await this.bot.sendChatAction(chatId, 'typing');

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
      const response = await this.aiClient.chat(text, { 
        model: selectedModel,
        max_tokens: 1500,
        temperature: 0.7
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
      await this.bot.sendMessage(chatId, response, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI –æ—Ç–≤–µ—Ç–∞:', error);
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ AI: ${error.message}`);
    }
  }

  async handleAIInterpretation(chatId, userId, spreadType) {
    const session = this.userSessions.get(userId);
    
    if (!session || !session.lastSpread) {
      await this.bot.sendMessage(chatId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞—Å–∫–ª–∞–¥ –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏');
      return;
    }

    try {
      await this.bot.sendChatAction(chatId, 'typing');
      
      const interpretation = await this.aiClient.interpretTarotSpread(session.lastSpread);
      
      const message = `
ü§ñ **AI –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ "${session.lastSpread.name}":**

${interpretation}

_–≠—Ç–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ä—Ç –¢–∞—Ä–æ._
`;

      await this.bot.sendMessage(chatId, message, {
        parse_mode: 'Markdown'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:', error);
      await this.bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ AI –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if (require.main === module) {
  try {
    new TelegramAIBot();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error.message);
    process.exit(1);
  }
}

module.exports = TelegramAIBot;
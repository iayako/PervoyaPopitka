"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI API –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ
"""

import openai
from typing import Dict, Optional
from config import OPENAI_API_KEY


class TarotAIInterpreter:
    def __init__(self):
        if OPENAI_API_KEY:
            openai.api_key = OPENAI_API_KEY
        else:
            print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def create_prompt(self, spread: Dict, user_question: str = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è ChatGPT –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å–∫–ª–∞–¥–∞"""
        prompt = f"""–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –∏ –¥–∞–π –≥–ª—É–±–æ–∫—É—é, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é.

–†–∞—Å–∫–ª–∞–¥: {spread['name']}
–û–ø–∏—Å–∞–Ω–∏–µ: {spread['description']}

–ö–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ:
"""
        
        for i, card in enumerate(spread['cards'], 1):
            status = "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è" if card['is_reversed'] else "–ø—Ä—è–º–∞—è"
            prompt += f"{i}. {card['position']}: {card['card_name']} ({status})\n"
        
        if user_question:
            prompt += f"\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}\n"
        
        prompt += """
–î–∞–π —Ü–µ–ª–æ—Å—Ç–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞, —É—á–∏—Ç—ã–≤–∞—è:
1. –°–≤—è–∑—å –º–µ–∂–¥—É –∫–∞—Ä—Ç–∞–º–∏
2. –û–±—â—É—é —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫—É —Ä–∞—Å–∫–ª–∞–¥–∞
3. –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π

–û—Ç–≤–µ—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è –º—É–¥—Ä—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é —ç–º–æ–¥–∑–∏ –∏ —Ä–∞–∑–¥–µ–ª–æ–≤.
"""
        
        return prompt
    
    async def get_ai_interpretation(self, spread: Dict, user_question: str = None) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞"""
        if not OPENAI_API_KEY:
            return "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OPENAI_API_KEY"
        
        try:
            prompt = self.create_prompt(spread, user_question)
            
            response = openai.ChatCompletion.create(
                model="gpt-4",  # –∏–ª–∏ "gpt-3.5-turbo" –¥–ª—è –±–æ–ª–µ–µ —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                messages=[
                    {"role": "system", "content": "–¢—ã - –º—É–¥—Ä—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞—Ç—å –≥–ª—É–±–æ–∫—É—é, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ, –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É –ø–æ–Ω—è—Ç—å —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=1500,
                temperature=0.7
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            formatted_response = f"ü§ñ **AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞**\n\n{ai_response}\n\n"
            formatted_response += "_–ü–æ–º–Ω–∏—Ç–µ: AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω—è–µ—Ç, –Ω–æ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç._"
            
            return formatted_response
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {str(e)}"
    
    def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API"""
        return OPENAI_API_KEY is not None and OPENAI_API_KEY != ""


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
ai_interpreter = TarotAIInterpreter() 
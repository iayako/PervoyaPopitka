"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –¢–∞—Ä–æ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑ JSON —Ñ–∞–π–ª–∞
"""

import json
from typing import Dict, List, Any


class TarotCardsLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    
    def __init__(self, json_file: str = "taro_cards.json"):
        self.json_file = json_file
        self.cards_data = self._load_cards()
    
    def _load_cards(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ä—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            with open(self.json_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"–§–∞–π–ª {self.json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {self.json_file}")
            return []
    
    def get_all_cards(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã"""
        return self.cards_data
    
    def get_card_by_index(self, index: int) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if 0 <= index < len(self.cards_data):
            return self.cards_data[index]
        return None
    
    def get_card_by_name(self, name: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ –∏–º–µ–Ω–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é)"""
        for card in self.cards_data:
            if card.get('name') == name:
                return card
        return None
    
    def get_card_by_arcana_name(self, arcana_name: str) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∞—Ä–∫–∞–Ω–∞"""
        for card in self.cards_data:
            if arcana_name in card.get('arcana_name', ''):
                return card
        return None
    
    def get_card_image_path(self, card_index: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã"""
        if 0 <= card_index < len(self.cards_data):
            card = self.cards_data[card_index]
            name = card.get('name', '')
            if name:
                return f"Cards-png/{card_index}.{name}.png"
        return None
    
    def get_card_meaning(self, card_index: int, 
                        is_reversed: bool = False) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (–ø—Ä—è–º–æ–µ –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ)"""
        card = self.get_card_by_index(card_index)
        if not card:
            return "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        arcana_name = card.get('arcana_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')
        name = card.get('name', '').replace('_', ' ')
        
        if is_reversed:
            title = f"üîÑ **{arcana_name}** ({name} - –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)\n\n"
        else:
            title = f"üîÆ **{arcana_name}** ({name})\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ general_meaning
        general_meaning = card.get('general_meaning', {})
        
        if is_reversed:
            meaning = general_meaning.get('reversed', 
                                        '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        else:
            meaning = general_meaning.get('upright', 
                                        '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        
        return title + meaning
    
    def format_card_description(self, card: Dict, is_reversed: bool = False) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç–µ"""
        if not card:
            return "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        arcana_name = card.get('arcana_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞')
        name = card.get('name', '').replace('_', ' ')
        
        if is_reversed:
            title = f"üîÑ **{arcana_name}** ({name} - –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)\n\n"
        else:
            title = f"üîÆ **{arcana_name}** ({name})\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ general_meaning
        general_meaning = card.get('general_meaning', {})
        
        if is_reversed:
            meaning = general_meaning.get('reversed', 
                                        '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        else:
            meaning = general_meaning.get('upright', 
                                        '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(meaning) > 500:
            meaning = meaning[:500] + "..."
        
        return title + meaning
    
    def get_card_love_meaning(self, card_index: int, 
                             is_reversed: bool = False) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ –ª—é–±–≤–∏"""
        card = self.get_card_by_index(card_index)
        if not card:
            return "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        love_meaning = card.get('love_meaning', {})
        
        if is_reversed:
            meaning = love_meaning.get('reversed', 
                                     '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤ –ª—é–±–≤–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        else:
            meaning = love_meaning.get('upright', 
                                     '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤ –ª—é–±–≤–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        
        return meaning
    
    def get_card_situation_meaning(self, card_index: int, 
                                  is_reversed: bool = False) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Å–∏—Ç—É–∞—Ü–∏–∏"""
        card = self.get_card_by_index(card_index)
        if not card:
            return "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        situation_meaning = card.get('situation_meaning', {})
        
        if is_reversed:
            meaning = situation_meaning.get('reversed', 
                                          '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        else:
            meaning = situation_meaning.get('upright', 
                                          '–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –≤ —Å–∏—Ç—É–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        
        return meaning
    
    def get_card_day_meaning(self, card_index: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è"""
        card = self.get_card_by_index(card_index)
        if not card:
            return "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        return card.get('day_meaning', '–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
    
    def get_card_advice(self, card_index: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç –∫–∞—Ä—Ç—ã"""
        card = self.get_card_by_index(card_index)
        if not card:
            return "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        return card.get('advice', '–°–æ–≤–µ—Ç –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    
    def get_card_positions(self, card_index: int) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä—è–º–æ–≥–æ –∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è"""
        card = self.get_card_by_index(card_index)
        if not card:
            return {"upright": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ", "reversed": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"}
        
        return {
            "upright": card.get('upright_position', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'),
            "reversed": card.get('reversed_position', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        }
    
    def get_statistics(self) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º"""
        major_arcana = 0
        minor_arcana = 0
        
        for card in self.cards_data:
            category = card.get('category', '')
            if '–°—Ç–∞—Ä—à–∏–µ –∞—Ä–∫–∞–Ω—ã' in category:
                major_arcana += 1
            else:
                minor_arcana += 1
        
        return {
            "total_cards": len(self.cards_data),
            "major_arcana": major_arcana,
            "minor_arcana": minor_arcana
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
tarot_loader = TarotCardsLoader()


# –¢–∏–ø—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏
SPREAD_TYPES = {
    "daily": {
        "name": "–ö–∞—Ä—Ç–∞ –¥–Ω—è",
        "description": "–û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ –¥–ª—è –æ–±—â–µ–≥–æ —Å–æ–≤–µ—Ç–∞ –Ω–∞ –¥–µ–Ω—å",
        "positions": ["–°–æ–≤–µ—Ç –Ω–∞ –¥–µ–Ω—å"]
    },
    "three_cards": {
        "name": "–ü—Ä–æ—à–ª–æ–µ-–ù–∞—Å—Ç–æ—è—â–µ–µ-–ë—É–¥—É—â–µ–µ",
        "description": "–¢—Ä–∏ –∫–∞—Ä—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Ç—É–∞—Ü–∏–∏",
        "positions": ["–ü—Ä–æ—à–ª–æ–µ", "–ù–∞—Å—Ç–æ—è—â–µ–µ", "–ë—É–¥—É—â–µ–µ"]
    },
    "celtic_cross": {
        "name": "–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
        "description": "–ü–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ 10 –∫–∞—Ä—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
        "positions": [
            "–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è",
            "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ –∏–ª–∏ –≤—ã–∑–æ–≤",
            "–û—Ç–¥–∞–ª–µ–Ω–Ω–æ–µ –ø—Ä–æ—à–ª–æ–µ",
            "–ù–µ–¥–∞–≤–Ω–µ–µ –ø—Ä–æ—à–ª–æ–µ",
            "–í–æ–∑–º–æ–∂–Ω—ã–π –∏—Å—Ö–æ–¥",
            "–ë–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ",
            "–í–∞—à –ø–æ–¥—Ö–æ–¥",
            "–í–Ω–µ—à–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è",
            "–ù–∞–¥–µ–∂–¥—ã –∏ —Å—Ç—Ä–∞—Ö–∏",
            "–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
        ]
    },
    "love": {
        "name": "–†–∞—Å–∫–ª–∞–¥ –Ω–∞ –ª—é–±–æ–≤—å",
        "description": "–ü—è—Ç—å –∫–∞—Ä—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
        "positions": [
            "–í–∞—à–∏ —á—É–≤—Å—Ç–≤–∞",
            "–ß—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
            "–ß—Ç–æ –≤–∞—Å —Å–≤—è–∑—ã–≤–∞–µ—Ç",
            "–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è",
            "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –æ—Ç–Ω–æ—à–µ–Ω–∏–π"
        ]
    }
}


def get_all_tarot_cards() -> List[Dict[str, Any]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∫–∞—Ä—Ç—ã –¢–∞—Ä–æ"""
    return tarot_loader.get_all_cards()


def get_tarot_card_by_index(index: int) -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    return tarot_loader.get_card_by_index(index)


def get_tarot_statistics() -> Dict[str, int]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ä—Ç–∞–º"""
    return tarot_loader.get_statistics() 
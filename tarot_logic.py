"""
–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –¢–∞—Ä–æ –∏ —Ä–∞—Å–∫–ª–∞–¥–∞–º–∏
"""

import random
from typing import List, Dict, Tuple
from tarot_cards import TAROT_CARDS, SPREAD_TYPES


class TarotReading:
    def __init__(self):
        self.cards = list(TAROT_CARDS.keys())
        
    def draw_cards(self, count: int) -> List[Tuple[str, bool]]:
        """
        –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞—Ä—Ç—ã, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞_–ª–∏)
        """
        if count > len(self.cards):
            raise ValueError(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å {count} –∫–∞—Ä—Ç –∏–∑ {len(self.cards)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö")
        
        selected_cards = random.sample(self.cards, count)
        
        # –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞ –ª–∏ –∫–∞—Ä—Ç–∞ (30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        cards_with_orientation = []
        for card in selected_cards:
            is_reversed = random.random() < 0.3
            cards_with_orientation.append((card, is_reversed))
        
        return cards_with_orientation
    
    def get_card_interpretation(self, card_name: str, is_reversed: bool) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
        """
        if card_name not in TAROT_CARDS:
            return "–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        card_data = TAROT_CARDS[card_name]
        
        if is_reversed:
            interpretation = f"üîÑ *{card_name}* (–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è)\n\n"
            interpretation += card_data.get("reversed", "–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        else:
            interpretation = f"üîÆ *{card_name}*\n\n"
            interpretation += card_data["meaning"]
        
        return interpretation
    
    def create_spread(self, spread_type: str) -> Dict:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å–∫–ª–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
        """
        if spread_type not in SPREAD_TYPES:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞: {spread_type}")
        
        spread_info = SPREAD_TYPES[spread_type]
        positions = spread_info["positions"]
        cards = self.draw_cards(len(positions))
        
        spread_result = {
            "name": spread_info["name"],
            "description": spread_info["description"],
            "cards": []
        }
        
        for i, (card_name, is_reversed) in enumerate(cards):
            card_info = {
                "position": positions[i],
                "card_name": card_name,
                "is_reversed": is_reversed,
                "interpretation": self.get_card_interpretation(card_name, is_reversed)
            }
            spread_result["cards"].append(card_info)
        
        return spread_result
    
    def format_spread_message(self, spread: Dict) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–∫–ª–∞–¥–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"‚ú® *{spread['name']}*\n\n"
        message += f"_{spread['description']}_\n\n"
        
        for i, card in enumerate(spread['cards'], 1):
            message += f"**{i}. {card['position']}**\n"
            message += f"{card['interpretation']}\n\n"
        
        return message


def get_chatgpt_interpretation(spread: Dict, user_question: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é ChatGPT
    (—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
    """
    # –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∑–∂–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ OpenAI API
    prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ –∏ –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é:\n\n"
    prompt += f"–†–∞—Å–∫–ª–∞–¥: {spread['name']}\n"
    
    for card in spread['cards']:
        status = "–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è" if card['is_reversed'] else "–ø—Ä—è–º–∞—è"
        prompt += f"- {card['position']}: {card['card_name']} ({status})\n"
    
    if user_question:
        prompt += f"\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question}\n"
    
    prompt += "\n–î–∞–π —Ü–µ–ª–æ—Å—Ç–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤—Å–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞, —Å–≤—è–∑–∞–≤ –∫–∞—Ä—Ç—ã –º–µ–∂–¥—É —Å–æ–±–æ–π."
    
    return prompt  # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –ø—Ä–æ–º–ø—Ç 
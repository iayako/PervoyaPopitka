const OpenRouterClient = require('./lib/openrouter');

async function testAPI() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ API...\n');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const client = new OpenRouterClient();
    console.log('‚úÖ –ö–ª–∏–µ–Ω—Ç OpenRouter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    console.log('\nüè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...');
    const isHealthy = await client.healthCheck();
    console.log(`–°—Ç–∞—Ç—É—Å API: ${isHealthy ? '‚úÖ –ó–¥–æ—Ä–æ–≤' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
    
    if (!isHealthy) {
      console.log('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç—ã');
      return;
    }
    
    // –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    console.log('\nüí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å...');
    const testMessage = '–ü—Ä–∏–≤–µ—Ç! –°–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.';
    console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: "${testMessage}"`);
    
    const response = await client.chat(testMessage, { max_tokens: 100 });
    console.log(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: "${response}"`);
    console.log(`–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${response.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // –¢–µ—Å—Ç —Å –¥—Ä—É–≥–æ–π –º–æ–¥–µ–ª—å—é
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥—É—é –º–æ–¥–µ–ª—å (QwQ-32B)...');
    const mathQuestion = '–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2? –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ.';
    console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: "${mathQuestion}"`);
    
    const mathResponse = await client.chat(mathQuestion, { 
      model: 'qwen/qwq-32b:free',
      max_tokens: 50 
    });
    console.log(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: "${mathResponse}"`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π
    console.log('\nüìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
    try {
      const models = await client.getModels();
      console.log(`–ù–∞–π–¥–µ–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: ${models.length}`);
      models.slice(0, 3).forEach(model => {
        console.log(`  - ${model.id}: ${model.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`);
      });
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π:', error.message);
    }
    
    console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testAPI();
}

module.exports = testAPI;
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from tarot_logic import TarotReading
from tarot_cards import TAROT_CARDS, SPREAD_TYPES


def test_tarot_reading():
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π TarotReading"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TarotReading...")
    
    reader = TarotReading()
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(reader.cards)} –∫–∞—Ä—Ç")
    assert len(reader.cards) == 22, f"–û–∂–∏–¥–∞–ª–æ—Å—å 22 –∫–∞—Ä—Ç—ã, –ø–æ–ª—É—á–µ–Ω–æ {len(reader.cards)}"
    
    # –¢–µ—Å—Ç 2: –í—ã–±–æ—Ä –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã
    cards = reader.draw_cards(1)
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ä—Ç–∞: {cards[0][0]} ({'–ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è' if cards[0][1] else '–ø—Ä—è–º–∞—è'})")
    assert len(cards) == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞"
    
    # –¢–µ—Å—Ç 3: –í—ã–±–æ—Ä —Ç—Ä–µ—Ö –∫–∞—Ä—Ç –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    cards = reader.draw_cards(3)
    card_names = [card[0] for card in cards]
    print(f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –∫–∞—Ä—Ç—ã: {', '.join(card_names)}")
    assert len(set(card_names)) == 3, "–ö–∞—Ä—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è"
    
    # –¢–µ—Å—Ç 4: –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã
    interpretation = reader.get_card_interpretation("–®—É—Ç", False)
    print(f"‚úÖ –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {interpretation[:50]}...")
    assert "–®—É—Ç" in interpretation, "–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã TarotReading –ø—Ä–æ–π–¥–µ–Ω—ã!")


def test_spreads():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–æ–≤...")
    
    reader = TarotReading()
    
    # –¢–µ—Å—Ç —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    for spread_type in SPREAD_TYPES:
        spread = reader.create_spread(spread_type)
        expected_cards = len(SPREAD_TYPES[spread_type]["positions"])
        
        print(f"‚úÖ {spread['name']}: {len(spread['cards'])} –∫–∞—Ä—Ç")
        assert len(spread['cards']) == expected_cards, f"–û–∂–∏–¥–∞–ª–æ—Å—å {expected_cards} –∫–∞—Ä—Ç"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ
        card_names = [card['card_name'] for card in spread['cards']]
        assert len(set(card_names)) == len(card_names), "–ö–∞—Ä—Ç—ã –≤ —Ä–∞—Å–∫–ª–∞–¥–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!")


def test_message_formatting():
    """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    reader = TarotReading()
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞
    spread = reader.create_spread("one_card")
    message = reader.format_spread_message(spread)
    
    print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: {len(message)} —Å–∏–º–≤–æ–ª–æ–≤")
    assert len(message) > 0, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    assert spread['name'] in message, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω—ã!")


def test_cards_database():
    """–¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ä—Ç
    for card_name, card_data in TAROT_CARDS.items():
        assert "number" in card_data, f"–ö–∞—Ä—Ç–∞ {card_name} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –Ω–æ–º–µ—Ä"
        assert "meaning" in card_data, f"–ö–∞—Ä—Ç–∞ {card_name} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ"
        assert "reversed" in card_data, f"–ö–∞—Ä—Ç–∞ {card_name} –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
    
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(TAROT_CARDS)} –∫–∞—Ä—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤
    for spread_type, spread_data in SPREAD_TYPES.items():
        assert "name" in spread_data, f"–†–∞—Å–∫–ª–∞–¥ {spread_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
        assert "description" in spread_data, f"–†–∞—Å–∫–ª–∞–¥ {spread_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ"
        assert "positions" in spread_data, f"–†–∞—Å–∫–ª–∞–¥ {spread_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–∑–∏—Ü–∏–∏"
        assert len(spread_data["positions"]) > 0, f"–†–∞—Å–∫–ª–∞–¥ {spread_type} –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é"
    
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {len(SPREAD_TYPES)} —Ä–∞—Å–∫–ª–∞–¥–æ–≤")
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã!")


def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¢–∞—Ä–æ-–±–æ—Ç–∞\n")
    
    try:
        test_cards_database()
        test_tarot_reading()
        test_spreads()
        test_message_formatting()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main() 